/*
    # Hello World!
*/

/**
 * Copy Ua to Ub with help of Utemp
 */
macro copy_u!(a, b, temp) {
    add_u!(a, b, temp);
}

/* Ub = Ua + Ub */
macro add_u!(a, b, temp) {
    while_nz (tdec_u(a)) {
        inc_u(b);
        inc_u(temp);
    }
    while_nz (tdec_u(temp)) {
        inc_u(a);
    }
}

/* safe `SET Bn` */
macro safe_set_b!(n) {
    read_b(n);
    set_b(n);
}

/* move head to 0 */
macro b_head_to_0!(n) {
    while_nz (tdec_b(n)) {}
}

/* Reset Un to 0 */
macro u_to_0!(n) {
    while_nz (tdec_u(n)) {}
}

/**
 * copy bits from Bfrom to Bto
 */
macro copy_binary!(from, to, temp_u1) {
    while_nz (tdec_u(ALLOC_NUM!())) {
        inc_u(temp_u1);
        if_z (read_b(from)) {
            read_b(to);
        } else {
            set_b(from);
            safe_set_b!(to);
        }
        inc_b(from);
        inc_b(to);
    }

    b_head_to_0!(from);
    b_head_to_0!(to);

    while_nz (tdec_u(temp_u1)) {
        inc_u(ALLOC_NUM!()); /* recover */
    }
}

/**
 * b1 = b1 - b2
 */
macro sub_b!(b1, b2, temp_u1, temp_u2, alloc_u) {
    copy_u!(alloc_u, temp_u2, temp_u1);

    while_nz (tdec_u(temp_u2)) {
        if_nz (read_b(b1)) {
            sub_a1();
        }

        if_nz (
            if_z (read_b(b2)) {
                sub_b0();
            } else {
                set_b(b2);
                sub_b1();
            }
        ) {
            set_b(b1);
        }
        inc_b(b1);
        inc_b(b2);
    }

    b_head_to_0!(b1);
    b_head_to_0!(b2);
}

/**
 * b2 = b1 - b2
 */
macro sub_b_rev!(b1, b2, temp_u1, temp_u2, alloc_u) {
    copy_u!(alloc_u, temp_u2, temp_u1);

    while_nz (tdec_u(temp_u2)) {
        if_nz (read_b(b1)) {
            set_b(b1);
            sub_a1();
        }

        if_nz (
            if_z (read_b(b2)) {
                sub_b0();
            } else {
                sub_b1();
            }
        ) {
            set_b(b2);
        }
        inc_b(b1);
        inc_b(b2);
    }

    b_head_to_0!(b1);
    b_head_to_0!(b2);
}

/**
 * binary2 = binary2 + binary1
 *
 * # Shifted addition
 * ```
 * repeat(n, inc_b(binary2));
 * add_b!(binary1, binary2, temp_u1, temp_u2);
 * ```
 * -> binary2 = binary2 + (binary1 << n)
 */
macro add_b!(binary1, binary2, temp_u1, temp_u2) {
    copy_u!(ALLOC_NUM!(), temp_u1, temp_u2);

    while_nz (tdec_u(temp_u1)) {
        if_nz (read_b(binary1)) {
            set_b(binary1);
            add_a1();
        }

        if_nz (
            /* use value from add_b0 or add_b1 */
            if_z (read_b(binary2)) {
                add_b0();
            } else {
                add_b1();
            }
        ) {
            set_b(binary2);
        }

        inc_b(binary1);
        inc_b(binary2);
    }

    b_head_to_0!(binary1);
    b_head_to_0!(binary2);
}

/**
 * binary = binary + constant
 * constant must be 1 or 2
 */
macro add_1_or_2_to_binary!(binary, constant) {
    repeat(constant, {
        loop {
            if_z (read_b(binary)) {
                set_b(binary);
                break();
            } else {
                inc_b(binary);
            }
        }

        b_head_to_0!(binary);
    });
}

/* binary = binary + 1 */
macro add_1_to_binary!(binary) {
    add_1_or_2_to_binary!(binary, 1);
}

/**
 * binary = binary - 1
 * binary must not be zero
 */
macro sub_1_from_binary!(binary) {
    loop {
        if_z (read_b(binary)) {
            set_b(binary);
            inc_b(binary);
        } else {
            break();
        }
    }
    b_head_to_0!(binary);
}

/*
    output_binary = output_binary + binary * small_binary
*/
macro mul_b_b!(
    binary, small_binary, small_binary_max_pointer, output_binary,
    temp_u1, temp_u2, temp_u3, temp_u4) {
    copy_u!(small_binary_max_pointer, temp_u1, temp_u2);

    inc_u(temp_u1);

    while_nz (tdec_u(temp_u1)) {
        while_nz (tdec_u(temp_u4)) {
            /* Shift */
            inc_b(output_binary);
            inc_u(temp_u2);
        }

        while_nz (tdec_u(temp_u2)) {
            inc_u(temp_u4);
        }

        inc_u(temp_u4);

        if_nz (read_b(small_binary)) {
            set_b(small_binary);
            add_b!(binary, output_binary, temp_u2, temp_u3);
        }

        inc_b(small_binary);
        b_head_to_0!(output_binary);
    }

    u_to_0!(temp_u4);

    b_head_to_0!(small_binary);
    b_head_to_0!(output_binary);
}

/*
    temp_binary = binary
    binary = binary * small_binary
*/
macro mul_b_b_self!(
    binary, small_binary, small_binary_max_pointer, temp_binary,
    temp_u1, temp_u2, temp_u3, temp_u4) {
    copy_binary!(binary, temp_binary, temp_u1);
    binary_zero!(binary);
    mul_b_b!(
        temp_binary,
        small_binary,
        small_binary_max_pointer,
        binary,
        temp_u1, temp_u2, temp_u3, temp_u4
    );
}


/* Set all bits to 0 */
macro binary_zero!(binary) {
    while_nz (tdec_u(ALLOC_NUM!())) {
        inc_b(binary);
    }
    while_nz (tdec_b(binary)) {
        read_b(binary);
        inc_u(ALLOC_NUM!()); /* recover */
    }
}

/* out_is_not_zero_u = 1 if binary is not zero */
macro binary_is_not_zero!(binary, out_is_not_zero_u, temp_u1, temp_u2) {
    copy_u!(ALLOC_NUM!(), temp_u1, temp_u2);
    while_nz (tdec_u(temp_u1)) {
        if_nz (read_b(binary)) {
            set_b(binary);
            inc_u(out_is_not_zero_u);
            break();
        }
        inc_b(binary);
    }
    u_to_0!(temp_u1);
    b_head_to_0!(binary);
}

/**
 * b1 > b2 --> result_u = 1
 * b1 <= b2 --> result_u = 0
 */
macro compare_binary!(b1, b2, result_u, temp_u1, temp_u2, alloc_u) {
    copy_u!(alloc_u, temp_u1, temp_u2);

    while_nz (tdec_u(temp_u1)) {
        inc_b(b1);
        inc_b(b2);
    }

    loop {
        if_z (read_b(b2)) {
            if_z (read_b(b1)) {
                tdec_b(b1);
                if_z (tdec_b(b2)) {
                    break();
                }
            } else {
                set_b(b1);
                /* b1 = 1, b2 = 0 --> b1 > b2 */
                inc_u(result_u);
                break();
            }
        } else {
            set_b(b2);
            if_z (read_b(b1)) {
                /* b1 = 0, b2 = 1 --> b1 < b2 */
                break();
            } else {
                set_b(b1);
                tdec_b(b1);
                if_z (tdec_b(b2)) {
                    break();
                }
            }
        }
    }

    b_head_to_0!(b1);
    b_head_to_0!(b2);
}

/* binary = binary << count */
macro right_shift_binary!(binary, count, temp_u1, temp_u2) {
    copy_u!(ALLOC_NUM!(), temp_u1, temp_u2);
    while_nz (tdec_u(temp_u1)) {
        repeat(count, inc_b(binary));
        if_z (read_b(binary)) {
            repeat(count, tdec_b(binary));
            /* set to 0 */
            read_b(binary);
        } else {
            repeat(count, tdec_b(binary));
            safe_set_b!(binary);
        }
        inc_b(binary);
    }
    b_head_to_0!(binary);
}

/* out = binary >= 2^power_u */
macro is_greater_than_or_equal_power!(binary, power_u, out, temp_u1, temp_u2, temp_u3) {
    copy_u!(ALLOC_NUM!(), temp_u2, temp_u1);
    while_nz (tdec_u(power_u)) {
        inc_u(temp_u3);
        inc_b(binary);
        tdec_u(temp_u2);
    }

    while_nz (tdec_u(temp_u3)) {
        inc_u(power_u);
    }

    while_nz (tdec_u(temp_u2)) {
        if_nz (read_b(binary)) {
            set_b(binary);
            inc_u(out);
            break();
        }
        inc_b(binary);
    }
    u_to_0!(temp_u2);
    b_head_to_0!(binary);
}

macro set_b2dx_0!() {
    while_nz (tdec_b2dx()) {}
}

macro set_b2dy_0!() {
    while_nz (tdec_b2dy()) {}
}

/* U8 = 8 */
macro const_8_U!() 8

/* B3 */
macro FONT_DATA!() 3

macro print_char!(code_b, temp_u1, temp_u2, temp_u3) {
    /* TODO newline */

    /* Move font data head */
    copy_u!(const_8_U!(), temp_u3, temp_u1);

    inc_u(temp_u1);
    while_nz (tdec_u(temp_u3)) {
        if_z (read_b(code_b)) {
            while_nz (tdec_u(temp_u1)) {
                inc_u(temp_u2);
            }
        } else {
            set_b(code_b);
            while_nz (tdec_u(temp_u1)) {
                repeat(64, inc_b(FONT_DATA!()));
                inc_u(temp_u2);
            }
        }

        inc_b(code_b);

        while_nz (tdec_u(temp_u2)) {
            repeat(2, inc_u(temp_u1));
        }
    }

    u_to_0!(temp_u1);

    copy_u!(const_8_U!(), temp_u3, temp_u1);

    while_nz (tdec_u(temp_u3)) {
        /* Restore */
        tdec_b(code_b);
    }

    /* Print to B2D */

    copy_u!(const_8_U!(), temp_u1, temp_u2);

    while_nz (tdec_u(temp_u1)) {
        copy_u!(const_8_U!(), temp_u2, temp_u3);
        while_nz (tdec_u(temp_u2)) {
            if_z (read_b(FONT_DATA!())) {
            } else {
                set_b(FONT_DATA!());
                set_b2d();
            }

            inc_b(FONT_DATA!());

            inc_b2dy();
        }

        copy_u!(const_8_U!(), temp_u2, temp_u3);
        while_nz (tdec_u(temp_u2)) {
            tdec_b2dy();
        }
        inc_b2dx();
    }

    b_head_to_0!(FONT_DATA!());

    /* Go to next Ccaracter */
    copy_u!(const_8_U!(), temp_u2, temp_u3);
    while_nz (tdec_u(temp_u2)) {
        inc_b2dy();
    }

    copy_u!(const_8_U!(), temp_u2, temp_u3);
    while_nz (tdec_u(temp_u2)) {
        tdec_b2dx();
    }
}

/*
  B0: string of ascii code
  B3: font data

  Font data is based on https://github.com/dhepper/font8x8/blob/8e279d2d864e79128e96188a6b9526cfa3fbfef9/font8x8_basic.h

  "Hello World!".split("").map(c => c.charCodeAt(0).toString(2).padStart(8, '0').split("").reverse().join("")).join("")
*/
#REGISTERS {"B0": [0, "000100101010011000110110001101101111011000000100111010101111011001001110001101100010011010000100"], "U8": 8, "B3": [0, ""]}

/* "Hello World!".length === 12 */
repeat(12, {
    print_char!(0, 1, 2, 3);
    repeat(8, inc_b(0));
});
