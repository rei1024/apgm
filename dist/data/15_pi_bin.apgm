/*
    # π Calculator
*/

/**
 * Copy Ua to Ub with help of Utemp
 */
macro copy_u!(a, b, temp) {
    add_u!(a, b, temp);
}

/* Ub = Ua + Ub */
macro add_u!(a, b, temp) {
    while_nz (tdec_u(a)) {
        inc_u(b);
        inc_u(temp);
    }
    while_nz (tdec_u(temp)) {
        inc_u(a);
    }
}

/* safe `SET Bn` */
macro safe_set_b!(n) {
    read_b(n);
    set_b(n);
}

/* move head to 0 */
macro b_head_to_0!(n) {
    while_nz (tdec_b(n)) {}
}

/* Reset Un to 0 */
macro u_to_0!(n) {
    while_nz (tdec_u(n)) {}
}

/**
 * copy bits from Bfrom to Bto
 *  temp_u1 is U9 on MULA
 *  temp_u2 is U7 on MULA
 */
macro copy_binary!(from, to, temp_u1, temp_u2) {
    copy_u!(ALLOC_NUM!(), temp_u2, temp_u1);

    while_nz (tdec_u(temp_u2)) {
        if_z (read_b(from)) {
            read_b(to);
        } else {
            set_b(from);
            safe_set_b!(to);
        }
        inc_b(from);
        inc_b(to);
    }

    b_head_to_0!(from);
    b_head_to_0!(to);
}

/**
 * b1 = b1 - b2
 */
macro sub_b!(b1, b2, temp_u1, temp_u2) {
    copy_u!(ALLOC_NUM!(), temp_u2, temp_u1);

    while_nz (tdec_u(temp_u2)) {
        if_nz (read_b(b1)) {
            sub_a1();
        }

        if_nz (
            if_z (read_b(b2)) {
                sub_b0();
            } else {
                set_b(2);
                sub_b1();
            }
        ) {
            set_b(b1);
        }
        inc_b(b1);
        inc_b(b2);
    }

    b_head_to_0!(b1);
    b_head_to_0!(b2);
}

/*
    binary2 = binary2 + binary1

    binary2のheadを最初にずらしておくことでbinary1をシフトして加算できる
*/
macro add_b!(binary1, binary2, temp_u1, temp_u2) {
    copy_u!(ALLOC_NUM!(), temp_u1, temp_u2);

    while_nz (tdec_u(temp_u1)) {
        if_nz (read_b(binary1)) {
            set_b(binary1);
            add_a1();
        }

        if_nz (
            /* use value from add_b0 or add_b1 */
            if_z (read_b(binary2)) {
                add_b0();
            } else {
                add_b1();
            }
        ) {
            set_b(binary2);
        }

        inc_b(binary1);
        inc_b(binary2);
    }

    b_head_to_0!(binary1);
    b_head_to_0!(binary2);
}

macro add_1_or_2_to_binary!(binary, binary_length_u, constant, temp_u1, temp_u2) {
    /* 3 is forbidden */
    repeat(constant, {
        loop {
            if_z (read_b(binary)) {
                set_b(binary);
                break();
            } else {
                inc_b(binary);
            }
        }

        b_head_to_0!(binary);
    });

    copy_u!(binary_length_u, temp_u1, temp_u2);
    while_nz (tdec_u(temp_u1)) {
        inc_b(binary);
    }

    inc_b(binary);
    if_nz (read_b(binary)) {
        set_b(binary);
        inc_u(binary_length_u);
    }
    b_head_to_0!(binary);
}

macro add_1_to_binary!(binary, binary_length_u, temp_u1, temp_u2) {
    add_1_or_2_to_binary!(binary, binary_length_u, 1, temp_u1, temp_u2);
}

macro add_2_to_binary!(binary, binary_length_u, temp_u1, temp_u2) {
    add_1_or_2_to_binary!(binary, binary_length_u, 2, temp_u1, temp_u2);
}

/*
    output_binary = binary1 * small_binary
*/
macro mul_b_b!(
    binary1, small_binary, small_binary_length, output_binary,
    temp_u1, temp_u2, temp_u3, temp_u4) {
    copy_u!(small_binary_length, temp_u1, temp_u2);

    while_nz (tdec_u(temp_u1)) {
        while_nz (tdec_u(temp_u4)) {
            /* Shift */
            inc_b(output_binary);
            inc_u(temp_u2);
        }

        while_nz (tdec_u(temp_u2)) {
            inc_u(temp_u4);
        }
        inc_u(temp_u4);

        if_nz (read_b(small_binary)) {
            add_b!(binary1, output_binary, temp_u2, temp_u3);
        }
        inc_b(small_binary);
    }

    b_head_to_0!(small_binary);
    b_head_to_0!(output_binary);
}

macro binary_zero!(binary, temp_u1, temp_u2) {
    copy_u!(ALLOC_NUM!(), temp_u1, temp_u2);

    while_nz (tdec_u(temp_u1)) {
        read_b(binary);
        inc_b(binary);
    }

    b_head_to_0!(binary);
}

/**
 * binary2 = binary2 + (unary - 1) * binary1
 */
macro mul_b_u_pred!(binary1, binary2, unary, temp_u1, temp_u2, temp_u3) {
    copy_u!(unary, temp_u2, temp_u1);

    tdec_u(temp_u2);

    while_nz (tdec_u(temp_u2)) {
        add_b!(binary1, binary2, temp_u3, temp_u1);
    }
}

/**
 * temp_binary = binary
 * binary = unary * binary
 */
macro mul_b_u_self!(binary, temp_binary, unary, temp_u1, temp_u2, temp_u3) {
    copy_binary!(binary, temp_binary, temp_u1, temp_u3);
    /* binary = binary + (unary - 1) * binary = unary * binary */
    mul_b_u_pred!(temp_binary, binary, unary, temp_u1, temp_u2, temp_u3);
}

/**
 * binary2 = binary2 + unary * binary1
 */
macro mul_b_u!(binary1, binary2, unary, temp_u1, temp_u2, temp_u3) {
    copy_u!(unary, temp_u2, temp_u1);

    while_nz (tdec_u(temp_u2)) {
        add_b!(binary1, binary2, temp_u3, temp_u1);
    }
}

/**
 * b1 > b2 --> result_u = 1
 * b1 <= b2 --> result_u = 0
 */
macro compare_binary!(b1, b2, result_u, temp_u1, temp_u2) {
    copy_u!(ALLOC_NUM!(), temp_u1, temp_u2);

    while_nz (tdec_u(temp_u1)) {
        inc_b(b1);
        inc_b(b2);
    }

    loop {
        if_z (read_b(b2)) {
            if_z (read_b(b1)) {
                tdec_b(b1);
                if_z (tdec_b(b2)) {
                    break();
                }
            } else {
                set_b(b1);
                /* b1 = 1, b2 = 0 --> b1 > b2 */
                inc_u(result_u);
                break();
            }
        } else {
            set_b(b2);
            if_z (read_b(b1)) {
                /* b1 = 0, b2 = 1 --> b1 < b2 */
                break();
            } else {
                set_b(b1);
                tdec_b(b1);
                if_z (tdec_b(b2)) {
                    break();
                }
            }
        }
    }

    b_head_to_0!(b1);
    b_head_to_0!(b2);
}

macro b_mul_10!(binary, temp_u1, temp_u2) {
    copy_u!(ALLOC_NUM!(), temp_u1, temp_u2);

    while_nz (tdec_u(temp_u1)) {
        if_nz (
            if_z (read_b(binary)) {
                mul_0();
            } else {
                mul_1();
            }
        ) {
            set_b(binary);
        }
        inc_b(binary);
    }

    b_head_to_0!(binary);
}

/*
 * Print single digit of an Ux register
 */
macro print_digit_u!(x) {
    if_z (tdec_u(x)) {
        output("0");
    } else if_z (tdec_u(x)) {
        output("1");
    } else if_z (tdec_u(x)) {
        output("2");
    } else if_z (tdec_u(x)) {
        output("3");
    } else if_z (tdec_u(x)) {
        output("4");
    } else if_z (tdec_u(x)) {
        output("5");
    } else if_z (tdec_u(x)) {
        output("6");
    } else if_z (tdec_u(x)) {
        output("7");
    } else if_z (tdec_u(x)) {
        output("8");
    } else {
        output("9");
    }
}


/* U6 */
macro ALLOC_NUM!() 6

/* U5 */
macro ITERATION_TEMP!() 5

/* U4 */
macro ITERATION_COUNT!() 4

/* U3 */
macro DECIMAL_COUNT!() 3


#REGISTERS { 'U6': 10, 'B0':[0,'110011'] }

add_b!(0, 2, 10, 11);

inc_b(2);

add_b!(0, 2, 10, 11);
